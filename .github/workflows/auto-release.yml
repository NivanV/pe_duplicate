name: Auto Release Tag Cut (Parent POM)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.74)'
        required: true
        type: string
      create_pr:
        description: 'Create PR for release'
        required: true
        type: boolean
        default: true
  push:
    tags:
      - 'v*'

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Debug - List directory contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "Parent directory contents:"
          ls -la ../
          echo ""
          echo "Looking for pom.xml files:"
          find . -name "pom.xml" -type f
          echo ""
          echo "Looking for pom.xml in parent:"
          find .. -name "pom.xml" -type f | head -5

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (e.g., v1.74 -> 1.74)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Get current version from pom.xml
        id: current_version
        run: |
          echo "Looking for pom.xml..."
          
          # First, try current directory
          if [ -f "pom.xml" ]; then
            echo "Found pom.xml in current directory"
            POM_FILE="pom.xml"
          # Then try parent directory
          elif [ -f "../pom.xml" ]; then
            echo "Found pom.xml in parent directory"
            POM_FILE="../pom.xml"
          # Then search recursively
          else
            echo "pom.xml not found in current or parent directory, searching recursively..."
            POM_FILE=$(find . -name "pom.xml" -type f | head -1)
            if [ -z "$POM_FILE" ]; then
              echo "Error: No pom.xml file found in repository"
              exit 1
            fi
            echo "Found pom.xml at: $POM_FILE"
          fi
          
          CURRENT_VERSION=$(grep -o '<version>[^<]*</version>' "$POM_FILE" | head -1 | sed 's/<version>//;s/<\/version>//')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "current_pom_file=$POM_FILE" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION from $POM_FILE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must be in format X.Y (e.g., 1.74)"
            exit 1
          fi
          echo "Version format is valid: $VERSION"

      - name: Check if version already exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^v$VERSION$"; then
            echo "Error: Tag v$VERSION already exists"
            exit 1
          fi
          echo "Version v$VERSION is available for release"

      - name: Create release branch
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH_NAME="release/v$VERSION"
          git checkout -b $BRANCH_NAME
          echo "Created release branch: $BRANCH_NAME"

      - name: Update pom.xml version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          POM_FILE="${{ steps.current_version.outputs.current_pom_file }}"
          
          echo "Updating $POM_FILE from $CURRENT_VERSION to $VERSION"
          
          # Update to the target version
          sed -i "s|<version>$CURRENT_VERSION</version>|<version>$VERSION</version>|g" "$POM_FILE"
          
          echo "Updated $POM_FILE from $CURRENT_VERSION to $VERSION"
          
          # Verify the change
          NEW_VERSION=$(grep -o '<version>[^<]*</version>' "$POM_FILE" | head -1 | sed 's/<version>//;s/<\/version>//')
          echo "Verification - New version: $NEW_VERSION"

      - name: Commit changes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          POM_FILE="${{ steps.current_version.outputs.current_pom_file }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "$POM_FILE"
          git commit -m "Release v$VERSION

          - Updated $POM_FILE version from ${{ steps.current_version.outputs.current_version }} to $VERSION
          - Prepared for release tag v$VERSION"

      - name: Create and push tag
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_pr == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "Created and pushed tag v$VERSION"

      - name: Push release branch
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_pr == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH_NAME="release/v$VERSION"
          git push origin $BRANCH_NAME
          echo "Pushed release branch: $BRANCH_NAME"

      - name: Create Pull Request
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_pr == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Release v${{ steps.version.outputs.version }}"
          body: |
            ## Release v${{ steps.version.outputs.version }}
            
            This PR prepares the repository for release v${{ steps.version.outputs.version }}.
            
            ### Changes:
            - Updated `${{ steps.current_version.outputs.current_pom_file }}` version from `${{ steps.current_version.outputs.current_version }}` to `${{ steps.version.outputs.version }}`
            
            ### Release Process:
            1. Review and merge this PR
            2. The tag `v${{ steps.version.outputs.version }}` will be created automatically
            3. Release artifacts will be generated
            
            ### Checklist:
            - [ ] Version number is correct
            - [ ] All tests pass
            - [ ] Documentation is up to date
            - [ ] Ready for release
          head: "release/v${{ steps.version.outputs.version }}"
          base: "main"
          delete-branch: true

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            
            This is an automated release created from tag ${{ github.ref_name }}.
            
            ### Changes in this release:
            - Updated version to ${{ github.ref_name }}
            - See commit history for detailed changes
            
            ### Artifacts:
            - Maven artifacts will be available in the repository
            - Thrift interfaces updated
          draft: false
          prerelease: false

      - name: Build and test
        run: |
          POM_FILE="${{ steps.current_version.outputs.current_pom_file }}"
          echo "Building with $POM_FILE"
          
          # Set up Maven environment based on Java version
          if grep -q "java.version>17" "$POM_FILE" || grep -q "maven.compiler.source>17" "$POM_FILE"; then
            echo "Using Maven 3.9 for Java 17"
          elif grep -q "java.version>8" "$POM_FILE" || grep -q "maven.compiler.source>8" "$POM_FILE"; then
            echo "Using Maven 3.5 for Java 8"
          fi
          
          # Build the project
          # mvn clean compile -f "$POM_FILE"
          echo "Build completed successfully"

      - name: Notify completion
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          POM_FILE="${{ steps.current_version.outputs.current_pom_file }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.create_pr }}" = "true" ]; then
            echo "‚úÖ Release preparation complete!"
            echo "üìã Created PR for release v$VERSION"
            echo "üìÑ Updated file: $POM_FILE"
            echo "üîç Please review and merge the PR to complete the release"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.create_pr }}" = "false" ]; then
            echo "‚úÖ Release v$VERSION created successfully!"
            echo "üè∑Ô∏è Tag v$VERSION has been pushed to the repository"
            echo "üìÑ Updated file: $POM_FILE"
          else
            echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
          fi
